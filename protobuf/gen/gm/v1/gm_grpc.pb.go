// protobuf/pb/gm/v1/gm.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: gm/v1/gm.proto

package gmv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GmService_ExecuteCommand_FullMethodName = "/gm.v1.GmService/ExecuteCommand"
	GmService_GetCommands_FullMethodName    = "/gm.v1.GmService/GetCommands"
)

// GmServiceClient is the client API for GmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GmServiceClient interface {
	ExecuteCommand(ctx context.Context, in *ExecuteCommandReq, opts ...grpc.CallOption) (*ExecuteCommandResp, error)
	GetCommands(ctx context.Context, in *GetCommandsReq, opts ...grpc.CallOption) (*GetCommandsResp, error)
}

type gmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGmServiceClient(cc grpc.ClientConnInterface) GmServiceClient {
	return &gmServiceClient{cc}
}

func (c *gmServiceClient) ExecuteCommand(ctx context.Context, in *ExecuteCommandReq, opts ...grpc.CallOption) (*ExecuteCommandResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteCommandResp)
	err := c.cc.Invoke(ctx, GmService_ExecuteCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gmServiceClient) GetCommands(ctx context.Context, in *GetCommandsReq, opts ...grpc.CallOption) (*GetCommandsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommandsResp)
	err := c.cc.Invoke(ctx, GmService_GetCommands_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GmServiceServer is the server API for GmService service.
// All implementations must embed UnimplementedGmServiceServer
// for forward compatibility.
type GmServiceServer interface {
	ExecuteCommand(context.Context, *ExecuteCommandReq) (*ExecuteCommandResp, error)
	GetCommands(context.Context, *GetCommandsReq) (*GetCommandsResp, error)
	mustEmbedUnimplementedGmServiceServer()
}

// UnimplementedGmServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGmServiceServer struct{}

func (UnimplementedGmServiceServer) ExecuteCommand(context.Context, *ExecuteCommandReq) (*ExecuteCommandResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteCommand not implemented")
}
func (UnimplementedGmServiceServer) GetCommands(context.Context, *GetCommandsReq) (*GetCommandsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommands not implemented")
}
func (UnimplementedGmServiceServer) mustEmbedUnimplementedGmServiceServer() {}
func (UnimplementedGmServiceServer) testEmbeddedByValue()                   {}

// UnsafeGmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GmServiceServer will
// result in compilation errors.
type UnsafeGmServiceServer interface {
	mustEmbedUnimplementedGmServiceServer()
}

func RegisterGmServiceServer(s grpc.ServiceRegistrar, srv GmServiceServer) {
	// If the following call pancis, it indicates UnimplementedGmServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GmService_ServiceDesc, srv)
}

func _GmService_ExecuteCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteCommandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmServiceServer).ExecuteCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmService_ExecuteCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmServiceServer).ExecuteCommand(ctx, req.(*ExecuteCommandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GmService_GetCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommandsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmServiceServer).GetCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmService_GetCommands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmServiceServer).GetCommands(ctx, req.(*GetCommandsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GmService_ServiceDesc is the grpc.ServiceDesc for GmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gm.v1.GmService",
	HandlerType: (*GmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteCommand",
			Handler:    _GmService_ExecuteCommand_Handler,
		},
		{
			MethodName: "GetCommands",
			Handler:    _GmService_GetCommands_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gm/v1/gm.proto",
}
