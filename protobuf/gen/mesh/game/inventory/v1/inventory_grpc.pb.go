// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: mesh/game/inventory/v1/inventory.proto

package inventoryv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InventoryService_AddItems_FullMethodName            = "/mesh.game.inventory.v1.InventoryService/AddItems"
	InventoryService_GetPlayerAssets_FullMethodName     = "/mesh.game.inventory.v1.InventoryService/GetPlayerAssets"
	InventoryService_GetPlayerItems_FullMethodName      = "/mesh.game.inventory.v1.InventoryService/GetPlayerItems"
	InventoryService_GetPlayerEquipments_FullMethodName = "/mesh.game.inventory.v1.InventoryService/GetPlayerEquipments"
	InventoryService_GetPlayerEquipped_FullMethodName   = "/mesh.game.inventory.v1.InventoryService/GetPlayerEquipped"
)

// InventoryServiceClient is the client API for InventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryServiceClient interface {
	AddItems(ctx context.Context, in *AddItemsReq, opts ...grpc.CallOption) (*AddItemsResp, error)
	GetPlayerAssets(ctx context.Context, in *GetPlayerAssetsReq, opts ...grpc.CallOption) (*GetPlayerAssetsResp, error)
	GetPlayerItems(ctx context.Context, in *GetPlayerItemsReq, opts ...grpc.CallOption) (*GetPlayerItemsResp, error)
	GetPlayerEquipments(ctx context.Context, in *GetPlayerEquipmentsReq, opts ...grpc.CallOption) (*GetPlayerEquipmentsResp, error)
	GetPlayerEquipped(ctx context.Context, in *GetPlayerEquippedReq, opts ...grpc.CallOption) (*GetPlayerEquippedResp, error)
}

type inventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryServiceClient(cc grpc.ClientConnInterface) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) AddItems(ctx context.Context, in *AddItemsReq, opts ...grpc.CallOption) (*AddItemsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddItemsResp)
	err := c.cc.Invoke(ctx, InventoryService_AddItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetPlayerAssets(ctx context.Context, in *GetPlayerAssetsReq, opts ...grpc.CallOption) (*GetPlayerAssetsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlayerAssetsResp)
	err := c.cc.Invoke(ctx, InventoryService_GetPlayerAssets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetPlayerItems(ctx context.Context, in *GetPlayerItemsReq, opts ...grpc.CallOption) (*GetPlayerItemsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlayerItemsResp)
	err := c.cc.Invoke(ctx, InventoryService_GetPlayerItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetPlayerEquipments(ctx context.Context, in *GetPlayerEquipmentsReq, opts ...grpc.CallOption) (*GetPlayerEquipmentsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlayerEquipmentsResp)
	err := c.cc.Invoke(ctx, InventoryService_GetPlayerEquipments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetPlayerEquipped(ctx context.Context, in *GetPlayerEquippedReq, opts ...grpc.CallOption) (*GetPlayerEquippedResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlayerEquippedResp)
	err := c.cc.Invoke(ctx, InventoryService_GetPlayerEquipped_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServiceServer is the server API for InventoryService service.
// All implementations must embed UnimplementedInventoryServiceServer
// for forward compatibility.
type InventoryServiceServer interface {
	AddItems(context.Context, *AddItemsReq) (*AddItemsResp, error)
	GetPlayerAssets(context.Context, *GetPlayerAssetsReq) (*GetPlayerAssetsResp, error)
	GetPlayerItems(context.Context, *GetPlayerItemsReq) (*GetPlayerItemsResp, error)
	GetPlayerEquipments(context.Context, *GetPlayerEquipmentsReq) (*GetPlayerEquipmentsResp, error)
	GetPlayerEquipped(context.Context, *GetPlayerEquippedReq) (*GetPlayerEquippedResp, error)
	mustEmbedUnimplementedInventoryServiceServer()
}

// UnimplementedInventoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInventoryServiceServer struct{}

func (UnimplementedInventoryServiceServer) AddItems(context.Context, *AddItemsReq) (*AddItemsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItems not implemented")
}
func (UnimplementedInventoryServiceServer) GetPlayerAssets(context.Context, *GetPlayerAssetsReq) (*GetPlayerAssetsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerAssets not implemented")
}
func (UnimplementedInventoryServiceServer) GetPlayerItems(context.Context, *GetPlayerItemsReq) (*GetPlayerItemsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerItems not implemented")
}
func (UnimplementedInventoryServiceServer) GetPlayerEquipments(context.Context, *GetPlayerEquipmentsReq) (*GetPlayerEquipmentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerEquipments not implemented")
}
func (UnimplementedInventoryServiceServer) GetPlayerEquipped(context.Context, *GetPlayerEquippedReq) (*GetPlayerEquippedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerEquipped not implemented")
}
func (UnimplementedInventoryServiceServer) mustEmbedUnimplementedInventoryServiceServer() {}
func (UnimplementedInventoryServiceServer) testEmbeddedByValue()                          {}

// UnsafeInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServiceServer will
// result in compilation errors.
type UnsafeInventoryServiceServer interface {
	mustEmbedUnimplementedInventoryServiceServer()
}

func RegisterInventoryServiceServer(s grpc.ServiceRegistrar, srv InventoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedInventoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InventoryService_ServiceDesc, srv)
}

func _InventoryService_AddItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).AddItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_AddItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).AddItems(ctx, req.(*AddItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetPlayerAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerAssetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetPlayerAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetPlayerAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetPlayerAssets(ctx, req.(*GetPlayerAssetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetPlayerItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetPlayerItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetPlayerItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetPlayerItems(ctx, req.(*GetPlayerItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetPlayerEquipments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerEquipmentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetPlayerEquipments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetPlayerEquipments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetPlayerEquipments(ctx, req.(*GetPlayerEquipmentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetPlayerEquipped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerEquippedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetPlayerEquipped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetPlayerEquipped_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetPlayerEquipped(ctx, req.(*GetPlayerEquippedReq))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryService_ServiceDesc is the grpc.ServiceDesc for InventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mesh.game.inventory.v1.InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddItems",
			Handler:    _InventoryService_AddItems_Handler,
		},
		{
			MethodName: "GetPlayerAssets",
			Handler:    _InventoryService_GetPlayerAssets_Handler,
		},
		{
			MethodName: "GetPlayerItems",
			Handler:    _InventoryService_GetPlayerItems_Handler,
		},
		{
			MethodName: "GetPlayerEquipments",
			Handler:    _InventoryService_GetPlayerEquipments_Handler,
		},
		{
			MethodName: "GetPlayerEquipped",
			Handler:    _InventoryService_GetPlayerEquipped_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mesh/game/inventory/v1/inventory.proto",
}
