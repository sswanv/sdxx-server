// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: hall/v1/hall.proto

package hallv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CoreService_Login_FullMethodName              = "/hall.v1.CoreService/Login"
	CoreService_FetchPlayerProfile_FullMethodName = "/hall.v1.CoreService/FetchPlayerProfile"
	CoreService_FetchPlayerAttrs_FullMethodName   = "/hall.v1.CoreService/FetchPlayerAttrs"
)

// CoreServiceClient is the client API for CoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreServiceClient interface {
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	FetchPlayerProfile(ctx context.Context, in *FetchPlayerProfileReq, opts ...grpc.CallOption) (*FetchPlayerProfileResp, error)
	FetchPlayerAttrs(ctx context.Context, in *FetchPlayerAttrsReq, opts ...grpc.CallOption) (*FetchPlayerAttrsResp, error)
}

type coreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreServiceClient(cc grpc.ClientConnInterface) CoreServiceClient {
	return &coreServiceClient{cc}
}

func (c *coreServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, CoreService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) FetchPlayerProfile(ctx context.Context, in *FetchPlayerProfileReq, opts ...grpc.CallOption) (*FetchPlayerProfileResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchPlayerProfileResp)
	err := c.cc.Invoke(ctx, CoreService_FetchPlayerProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) FetchPlayerAttrs(ctx context.Context, in *FetchPlayerAttrsReq, opts ...grpc.CallOption) (*FetchPlayerAttrsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchPlayerAttrsResp)
	err := c.cc.Invoke(ctx, CoreService_FetchPlayerAttrs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreServiceServer is the server API for CoreService service.
// All implementations must embed UnimplementedCoreServiceServer
// for forward compatibility.
type CoreServiceServer interface {
	Login(context.Context, *LoginReq) (*LoginResp, error)
	FetchPlayerProfile(context.Context, *FetchPlayerProfileReq) (*FetchPlayerProfileResp, error)
	FetchPlayerAttrs(context.Context, *FetchPlayerAttrsReq) (*FetchPlayerAttrsResp, error)
	mustEmbedUnimplementedCoreServiceServer()
}

// UnimplementedCoreServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCoreServiceServer struct{}

func (UnimplementedCoreServiceServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedCoreServiceServer) FetchPlayerProfile(context.Context, *FetchPlayerProfileReq) (*FetchPlayerProfileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPlayerProfile not implemented")
}
func (UnimplementedCoreServiceServer) FetchPlayerAttrs(context.Context, *FetchPlayerAttrsReq) (*FetchPlayerAttrsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPlayerAttrs not implemented")
}
func (UnimplementedCoreServiceServer) mustEmbedUnimplementedCoreServiceServer() {}
func (UnimplementedCoreServiceServer) testEmbeddedByValue()                     {}

// UnsafeCoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreServiceServer will
// result in compilation errors.
type UnsafeCoreServiceServer interface {
	mustEmbedUnimplementedCoreServiceServer()
}

func RegisterCoreServiceServer(s grpc.ServiceRegistrar, srv CoreServiceServer) {
	// If the following call pancis, it indicates UnimplementedCoreServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CoreService_ServiceDesc, srv)
}

func _CoreService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_FetchPlayerProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchPlayerProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).FetchPlayerProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_FetchPlayerProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).FetchPlayerProfile(ctx, req.(*FetchPlayerProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_FetchPlayerAttrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchPlayerAttrsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).FetchPlayerAttrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_FetchPlayerAttrs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).FetchPlayerAttrs(ctx, req.(*FetchPlayerAttrsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CoreService_ServiceDesc is the grpc.ServiceDesc for CoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hall.v1.CoreService",
	HandlerType: (*CoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _CoreService_Login_Handler,
		},
		{
			MethodName: "FetchPlayerProfile",
			Handler:    _CoreService_FetchPlayerProfile_Handler,
		},
		{
			MethodName: "FetchPlayerAttrs",
			Handler:    _CoreService_FetchPlayerAttrs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hall/v1/hall.proto",
}

const (
	InventoryService_FetchPlayerItems_FullMethodName      = "/hall.v1.InventoryService/FetchPlayerItems"
	InventoryService_FetchPlayerEquipments_FullMethodName = "/hall.v1.InventoryService/FetchPlayerEquipments"
)

// InventoryServiceClient is the client API for InventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryServiceClient interface {
	FetchPlayerItems(ctx context.Context, in *FetchPlayerItemsReq, opts ...grpc.CallOption) (*FetchPlayerItemsResp, error)
	FetchPlayerEquipments(ctx context.Context, in *FetchPlayerEquipmentsReq, opts ...grpc.CallOption) (*FetchPlayerEquipmentsResp, error)
}

type inventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryServiceClient(cc grpc.ClientConnInterface) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) FetchPlayerItems(ctx context.Context, in *FetchPlayerItemsReq, opts ...grpc.CallOption) (*FetchPlayerItemsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchPlayerItemsResp)
	err := c.cc.Invoke(ctx, InventoryService_FetchPlayerItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) FetchPlayerEquipments(ctx context.Context, in *FetchPlayerEquipmentsReq, opts ...grpc.CallOption) (*FetchPlayerEquipmentsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchPlayerEquipmentsResp)
	err := c.cc.Invoke(ctx, InventoryService_FetchPlayerEquipments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServiceServer is the server API for InventoryService service.
// All implementations must embed UnimplementedInventoryServiceServer
// for forward compatibility.
type InventoryServiceServer interface {
	FetchPlayerItems(context.Context, *FetchPlayerItemsReq) (*FetchPlayerItemsResp, error)
	FetchPlayerEquipments(context.Context, *FetchPlayerEquipmentsReq) (*FetchPlayerEquipmentsResp, error)
	mustEmbedUnimplementedInventoryServiceServer()
}

// UnimplementedInventoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInventoryServiceServer struct{}

func (UnimplementedInventoryServiceServer) FetchPlayerItems(context.Context, *FetchPlayerItemsReq) (*FetchPlayerItemsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPlayerItems not implemented")
}
func (UnimplementedInventoryServiceServer) FetchPlayerEquipments(context.Context, *FetchPlayerEquipmentsReq) (*FetchPlayerEquipmentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPlayerEquipments not implemented")
}
func (UnimplementedInventoryServiceServer) mustEmbedUnimplementedInventoryServiceServer() {}
func (UnimplementedInventoryServiceServer) testEmbeddedByValue()                          {}

// UnsafeInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServiceServer will
// result in compilation errors.
type UnsafeInventoryServiceServer interface {
	mustEmbedUnimplementedInventoryServiceServer()
}

func RegisterInventoryServiceServer(s grpc.ServiceRegistrar, srv InventoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedInventoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InventoryService_ServiceDesc, srv)
}

func _InventoryService_FetchPlayerItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchPlayerItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).FetchPlayerItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_FetchPlayerItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).FetchPlayerItems(ctx, req.(*FetchPlayerItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_FetchPlayerEquipments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchPlayerEquipmentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).FetchPlayerEquipments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_FetchPlayerEquipments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).FetchPlayerEquipments(ctx, req.(*FetchPlayerEquipmentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryService_ServiceDesc is the grpc.ServiceDesc for InventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hall.v1.InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchPlayerItems",
			Handler:    _InventoryService_FetchPlayerItems_Handler,
		},
		{
			MethodName: "FetchPlayerEquipments",
			Handler:    _InventoryService_FetchPlayerEquipments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hall/v1/hall.proto",
}
