
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type Property struct {
    PropertyId int32
    Type int32
    Maximum int32
    Score int32
}

const TypeId_Property = -928497163

func (*Property) GetTypeId() int32 {
    return -928497163
}

func NewProperty(_buf map[string]interface{}) (_v *Property, err error) {
    _v = &Property{}
    { var _ok_ bool; var __json_property_id__ interface{}; if __json_property_id__, _ok_ = _buf["property_id"]; !_ok_ || __json_property_id__ == nil { err = errors.New("property_id error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_property_id__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.PropertyId = __x__ }}
    { var _ok_ bool; var __json_type__ interface{}; if __json_type__, _ok_ = _buf["type"]; !_ok_ || __json_type__ == nil { err = errors.New("type error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_type__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.Type = __x__ }}
    { var _ok_ bool; var __json_maximum__ interface{}; if __json_maximum__, _ok_ = _buf["maximum"]; !_ok_ || __json_maximum__ == nil { err = errors.New("maximum error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_maximum__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.Maximum = __x__ }}
    { var _ok_ bool; var __json_score__ interface{}; if __json_score__, _ok_ = _buf["score"]; !_ok_ || __json_score__ == nil { err = errors.New("score error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_score__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.Score = __x__ }}
    return
}

