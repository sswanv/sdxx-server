
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type Role struct {
    RoleId int32
    Name int32
    RoleModel int32
    Type int32
    RoleSkilMin int32
    RoleSkilMax int32
    DefaultAttack int32
    InitializeLv int32
    InitializeAvatar int32
}

const TypeId_Role = 2552982

func (*Role) GetTypeId() int32 {
    return 2552982
}

func NewRole(_buf map[string]interface{}) (_v *Role, err error) {
    _v = &Role{}
    { var _ok_ bool; var __json_role_id__ interface{}; if __json_role_id__, _ok_ = _buf["role_id"]; !_ok_ || __json_role_id__ == nil { err = errors.New("role_id error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_role_id__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.RoleId = __x__ }}
    { var _ok_ bool; var __json_name__ interface{}; if __json_name__, _ok_ = _buf["name"]; !_ok_ || __json_name__ == nil { err = errors.New("name error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_name__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.Name = __x__ }}
    { var _ok_ bool; var __json_role_model__ interface{}; if __json_role_model__, _ok_ = _buf["role_model"]; !_ok_ || __json_role_model__ == nil { err = errors.New("role_model error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_role_model__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.RoleModel = __x__ }}
    { var _ok_ bool; var __json_type__ interface{}; if __json_type__, _ok_ = _buf["type"]; !_ok_ || __json_type__ == nil { err = errors.New("type error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_type__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.Type = __x__ }}
    { var _ok_ bool; var __json_role_skil_min__ interface{}; if __json_role_skil_min__, _ok_ = _buf["role_skil_min"]; !_ok_ || __json_role_skil_min__ == nil { err = errors.New("role_skil_min error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_role_skil_min__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.RoleSkilMin = __x__ }}
    { var _ok_ bool; var __json_role_skil_max__ interface{}; if __json_role_skil_max__, _ok_ = _buf["role_skil_max"]; !_ok_ || __json_role_skil_max__ == nil { err = errors.New("role_skil_max error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_role_skil_max__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.RoleSkilMax = __x__ }}
    { var _ok_ bool; var __json_default_attack__ interface{}; if __json_default_attack__, _ok_ = _buf["default_attack"]; !_ok_ || __json_default_attack__ == nil { err = errors.New("default_attack error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_default_attack__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.DefaultAttack = __x__ }}
    { var _ok_ bool; var __json_initialize_lv__ interface{}; if __json_initialize_lv__, _ok_ = _buf["initialize_lv"]; !_ok_ || __json_initialize_lv__ == nil { err = errors.New("initialize_lv error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_initialize_lv__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.InitializeLv = __x__ }}
    { var _ok_ bool; var __json_initialize_avatar__ interface{}; if __json_initialize_avatar__, _ok_ = _buf["initialize_avatar"]; !_ok_ || __json_initialize_avatar__ == nil { err = errors.New("initialize_avatar error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_initialize_avatar__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.InitializeAvatar = __x__ }}
    return
}

