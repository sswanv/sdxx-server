
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type SkillEffect struct {
    Id int32
    BulletShapeType int32
    AddSelfBuff []int32
    AddHitBuff []int32
    Frequency float32
}

const TypeId_SkillEffect = -795519198

func (*SkillEffect) GetTypeId() int32 {
    return -795519198
}

func NewSkillEffect(_buf map[string]interface{}) (_v *SkillEffect, err error) {
    _v = &SkillEffect{}
    { var _ok_ bool; var __json_id__ interface{}; if __json_id__, _ok_ = _buf["id"]; !_ok_ || __json_id__ == nil { err = errors.New("id error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_id__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.Id = __x__ }}
    { var _ok_ bool; var __json_bullet_shape_type__ interface{}; if __json_bullet_shape_type__, _ok_ = _buf["bullet_shape_type"]; !_ok_ || __json_bullet_shape_type__ == nil { err = errors.New("bullet_shape_type error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_bullet_shape_type__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.BulletShapeType = __x__ }}
    { var _ok_ bool; var __json_add_self_buff__ interface{}; if __json_add_self_buff__, _ok_ = _buf["add_self_buff"]; !_ok_ || __json_add_self_buff__ == nil { err = errors.New("add_self_buff error"); return } else { var __x__ []int32;  {
                    var _arr0_ []interface{}
                    var _ok0_ bool
                    if _arr0_, _ok0_ = (__json_add_self_buff__).([]interface{}); !_ok0_ { err = errors.New("__x__ error"); return }
    
                    __x__ = make([]int32, 0, len(_arr0_))
                    
                    for _, _e0_ := range _arr0_ {
                        var _list_v0_ int32
                        { var _ok_ bool; var _x_ float64; if _x_, _ok_ = _e0_.(float64); !_ok_ { err = errors.New("_list_v0_ error"); return }; _list_v0_ = int32(_x_) }
                        __x__ = append(__x__, _list_v0_)
                    }
                }
    ; _v.AddSelfBuff = __x__ }}
    { var _ok_ bool; var __json_add_hit_buff__ interface{}; if __json_add_hit_buff__, _ok_ = _buf["add_hit_buff"]; !_ok_ || __json_add_hit_buff__ == nil { err = errors.New("add_hit_buff error"); return } else { var __x__ []int32;  {
                    var _arr0_ []interface{}
                    var _ok0_ bool
                    if _arr0_, _ok0_ = (__json_add_hit_buff__).([]interface{}); !_ok0_ { err = errors.New("__x__ error"); return }
    
                    __x__ = make([]int32, 0, len(_arr0_))
                    
                    for _, _e0_ := range _arr0_ {
                        var _list_v0_ int32
                        { var _ok_ bool; var _x_ float64; if _x_, _ok_ = _e0_.(float64); !_ok_ { err = errors.New("_list_v0_ error"); return }; _list_v0_ = int32(_x_) }
                        __x__ = append(__x__, _list_v0_)
                    }
                }
    ; _v.AddHitBuff = __x__ }}
    { var _ok_ bool; var __json_frequency__ interface{}; if __json_frequency__, _ok_ = _buf["frequency"]; !_ok_ || __json_frequency__ == nil { err = errors.New("frequency error"); return } else { var __x__ float32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_frequency__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = float32(_x_) }; _v.Frequency = __x__ }}
    return
}

