
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type Global struct {
    InitialRole int32
    PropType []int32
    PlayerAssets []int32
}

const TypeId_Global = 2135814083

func (*Global) GetTypeId() int32 {
    return 2135814083
}

func NewGlobal(_buf map[string]interface{}) (_v *Global, err error) {
    _v = &Global{}
    { var _ok_ bool; var __json_initial_role__ interface{}; if __json_initial_role__, _ok_ = _buf["initial_role"]; !_ok_ || __json_initial_role__ == nil { err = errors.New("initial_role error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_initial_role__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.InitialRole = __x__ }}
    { var _ok_ bool; var __json_prop_type__ interface{}; if __json_prop_type__, _ok_ = _buf["prop_type"]; !_ok_ || __json_prop_type__ == nil { err = errors.New("prop_type error"); return } else { var __x__ []int32;  {
                    var _arr0_ []interface{}
                    var _ok0_ bool
                    if _arr0_, _ok0_ = (__json_prop_type__).([]interface{}); !_ok0_ { err = errors.New("__x__ error"); return }
    
                    __x__ = make([]int32, 0, len(_arr0_))
                    
                    for _, _e0_ := range _arr0_ {
                        var _list_v0_ int32
                        { var _ok_ bool; var _x_ float64; if _x_, _ok_ = _e0_.(float64); !_ok_ { err = errors.New("_list_v0_ error"); return }; _list_v0_ = int32(_x_) }
                        __x__ = append(__x__, _list_v0_)
                    }
                }
    ; _v.PropType = __x__ }}
    { var _ok_ bool; var __json_player_assets__ interface{}; if __json_player_assets__, _ok_ = _buf["player_assets"]; !_ok_ || __json_player_assets__ == nil { err = errors.New("player_assets error"); return } else { var __x__ []int32;  {
                    var _arr0_ []interface{}
                    var _ok0_ bool
                    if _arr0_, _ok0_ = (__json_player_assets__).([]interface{}); !_ok0_ { err = errors.New("__x__ error"); return }
    
                    __x__ = make([]int32, 0, len(_arr0_))
                    
                    for _, _e0_ := range _arr0_ {
                        var _list_v0_ int32
                        { var _ok_ bool; var _x_ float64; if _x_, _ok_ = _e0_.(float64); !_ok_ { err = errors.New("_list_v0_ error"); return }; _list_v0_ = int32(_x_) }
                        __x__ = append(__x__, _list_v0_)
                    }
                }
    ; _v.PlayerAssets = __x__ }}
    return
}

