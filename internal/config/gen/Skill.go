
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type Skill struct {
    Id int32
    GroupId int32
    SkillLv int32
    UpgradeConsume []*ConsumeItem
    SkillConsume *PriorityConsume
    SkillCd float32
    SkillCount int32
    SkillRange int32
    SkillType int32
    SkillAnimation string
    SkillTime int32
    SkillPriority int32
    SkillTarget int32
    HarmType int32
    HarmProperty int32
    HarmCoefficient int32
    HarmNumber int32
    SkillBullet []*SkillBullet
}

const TypeId_Skill = 79944241

func (*Skill) GetTypeId() int32 {
    return 79944241
}

func NewSkill(_buf map[string]interface{}) (_v *Skill, err error) {
    _v = &Skill{}
    { var _ok_ bool; var __json_id__ interface{}; if __json_id__, _ok_ = _buf["id"]; !_ok_ || __json_id__ == nil { err = errors.New("id error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_id__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.Id = __x__ }}
    { var _ok_ bool; var __json_group_id__ interface{}; if __json_group_id__, _ok_ = _buf["group_id"]; !_ok_ || __json_group_id__ == nil { err = errors.New("group_id error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_group_id__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.GroupId = __x__ }}
    { var _ok_ bool; var __json_skill_lv__ interface{}; if __json_skill_lv__, _ok_ = _buf["skill_lv"]; !_ok_ || __json_skill_lv__ == nil { err = errors.New("skill_lv error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_skill_lv__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.SkillLv = __x__ }}
    { var _ok_ bool; var __json_upgrade_consume__ interface{}; if __json_upgrade_consume__, _ok_ = _buf["upgrade_consume"]; !_ok_ || __json_upgrade_consume__ == nil { err = errors.New("upgrade_consume error"); return } else { var __x__ []*ConsumeItem;  {
                    var _arr0_ []interface{}
                    var _ok0_ bool
                    if _arr0_, _ok0_ = (__json_upgrade_consume__).([]interface{}); !_ok0_ { err = errors.New("__x__ error"); return }
    
                    __x__ = make([]*ConsumeItem, 0, len(_arr0_))
                    
                    for _, _e0_ := range _arr0_ {
                        var _list_v0_ *ConsumeItem
                        { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = _e0_.(map[string]interface{}); !_ok_ { err = errors.New("_list_v0_ error"); return }; if _list_v0_, err = NewConsumeItem(_x_); err != nil { return } }
                        __x__ = append(__x__, _list_v0_)
                    }
                }
    ; _v.UpgradeConsume = __x__ }}
    { var _ok_ bool; var __json_skill_consume__ interface{}; if __json_skill_consume__, _ok_ = _buf["skill_consume"]; !_ok_ || __json_skill_consume__ == nil { err = errors.New("skill_consume error"); return } else { var __x__ *PriorityConsume;  { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = __json_skill_consume__.(map[string]interface{}); !_ok_ { err = errors.New("__x__ error"); return }; if __x__, err = NewPriorityConsume(_x_); err != nil { return } }; _v.SkillConsume = __x__ }}
    { var _ok_ bool; var __json_skill_cd__ interface{}; if __json_skill_cd__, _ok_ = _buf["skill_cd"]; !_ok_ || __json_skill_cd__ == nil { err = errors.New("skill_cd error"); return } else { var __x__ float32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_skill_cd__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = float32(_x_) }; _v.SkillCd = __x__ }}
    { var _ok_ bool; var __json_skill_count__ interface{}; if __json_skill_count__, _ok_ = _buf["skill_count"]; !_ok_ || __json_skill_count__ == nil { err = errors.New("skill_count error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_skill_count__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.SkillCount = __x__ }}
    { var _ok_ bool; var __json_skill_range__ interface{}; if __json_skill_range__, _ok_ = _buf["skill_range"]; !_ok_ || __json_skill_range__ == nil { err = errors.New("skill_range error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_skill_range__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.SkillRange = __x__ }}
    { var _ok_ bool; var __json_skill_type__ interface{}; if __json_skill_type__, _ok_ = _buf["skill_type"]; !_ok_ || __json_skill_type__ == nil { err = errors.New("skill_type error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_skill_type__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.SkillType = __x__ }}
    { var _ok_ bool; var __json_skill_animation__ interface{}; if __json_skill_animation__, _ok_ = _buf["skill_animation"]; !_ok_ || __json_skill_animation__ == nil { err = errors.New("skill_animation error"); return } else { var __x__ string;  {  if __x__, _ok_ = __json_skill_animation__.(string); !_ok_ { err = errors.New("__x__ error"); return } }; _v.SkillAnimation = __x__ }}
    { var _ok_ bool; var __json_skill_time__ interface{}; if __json_skill_time__, _ok_ = _buf["skill_time"]; !_ok_ || __json_skill_time__ == nil { err = errors.New("skill_time error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_skill_time__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.SkillTime = __x__ }}
    { var _ok_ bool; var __json_skill_priority__ interface{}; if __json_skill_priority__, _ok_ = _buf["skill_priority"]; !_ok_ || __json_skill_priority__ == nil { err = errors.New("skill_priority error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_skill_priority__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.SkillPriority = __x__ }}
    { var _ok_ bool; var __json_skill_target__ interface{}; if __json_skill_target__, _ok_ = _buf["skill_target"]; !_ok_ || __json_skill_target__ == nil { err = errors.New("skill_target error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_skill_target__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.SkillTarget = __x__ }}
    { var _ok_ bool; var __json_harm_type__ interface{}; if __json_harm_type__, _ok_ = _buf["harm_type"]; !_ok_ || __json_harm_type__ == nil { err = errors.New("harm_type error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_harm_type__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.HarmType = __x__ }}
    { var _ok_ bool; var __json_harm_property__ interface{}; if __json_harm_property__, _ok_ = _buf["harm_property"]; !_ok_ || __json_harm_property__ == nil { err = errors.New("harm_property error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_harm_property__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.HarmProperty = __x__ }}
    { var _ok_ bool; var __json_harm_coefficient__ interface{}; if __json_harm_coefficient__, _ok_ = _buf["harm_coefficient"]; !_ok_ || __json_harm_coefficient__ == nil { err = errors.New("harm_coefficient error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_harm_coefficient__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.HarmCoefficient = __x__ }}
    { var _ok_ bool; var __json_harm_number__ interface{}; if __json_harm_number__, _ok_ = _buf["harm_number"]; !_ok_ || __json_harm_number__ == nil { err = errors.New("harm_number error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_harm_number__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.HarmNumber = __x__ }}
    { var _ok_ bool; var __json_skill_bullet__ interface{}; if __json_skill_bullet__, _ok_ = _buf["skill_bullet"]; !_ok_ || __json_skill_bullet__ == nil { err = errors.New("skill_bullet error"); return } else { var __x__ []*SkillBullet;  {
                    var _arr0_ []interface{}
                    var _ok0_ bool
                    if _arr0_, _ok0_ = (__json_skill_bullet__).([]interface{}); !_ok0_ { err = errors.New("__x__ error"); return }
    
                    __x__ = make([]*SkillBullet, 0, len(_arr0_))
                    
                    for _, _e0_ := range _arr0_ {
                        var _list_v0_ *SkillBullet
                        { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = _e0_.(map[string]interface{}); !_ok_ { err = errors.New("_list_v0_ error"); return }; if _list_v0_, err = NewSkillBullet(_x_); err != nil { return } }
                        __x__ = append(__x__, _list_v0_)
                    }
                }
    ; _v.SkillBullet = __x__ }}
    return
}

