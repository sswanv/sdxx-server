// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"

	"github.com/SpectatorNan/gorm-zero/gormc/pagex"
	"gorm.io/gorm"
)

type (
	playerAssetsModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *PlayerAssets) error
		BatchInsert(ctx context.Context, tx *gorm.DB, news []PlayerAssets) error
		FindOne(ctx context.Context, id int64) (*PlayerAssets, error)
		FindPageList(ctx context.Context, page *pagex.ListReq, orderBy pagex.OrderBy,
			orderKeys map[string]string, whereClause func(db *gorm.DB) *gorm.DB) ([]PlayerAssets, int64, error)
		FindOneByPlayerIdItemId(ctx context.Context, playerId uint64, itemId uint64) (*PlayerAssets, error)
		Update(ctx context.Context, tx *gorm.DB, data *PlayerAssets) error
		BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []PlayerAssets) error
		BatchDelete(ctx context.Context, tx *gorm.DB, datas []PlayerAssets) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
	}

	defaultPlayerAssetsModel struct {
		conn  *gorm.DB
		table string
	}

	PlayerAssets struct {
		Id        int64     `gorm:"column:id;primary_key"` // 自增id
		CreatedAt time.Time `gorm:"column:created_at"`     // 创建时间
		UpdatedAt time.Time `gorm:"column:updated_at"`     // 更新时间
		ServerId  uint64    `gorm:"column:server_id"`      // 服务器id
		PlayerId  uint64    `gorm:"column:player_id"`      // 玩家id
		ItemId    uint64    `gorm:"column:item_id"`        // 道具id
		Type      uint64    `gorm:"column:type"`           // 道具类型
		SubType   uint64    `gorm:"column:sub_type"`       // 道具子类型
		Count     uint64    `gorm:"column:count"`          // 数量
	}
)

func (PlayerAssets) TableName() string {
	return "`player_assets`"
}

func newPlayerAssetsModel(db *gorm.DB) *defaultPlayerAssetsModel {
	return &defaultPlayerAssetsModel{
		conn:  db,
		table: "`player_assets`",
	}
}

func (m *defaultPlayerAssetsModel) Insert(ctx context.Context, tx *gorm.DB, data *PlayerAssets) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Create(&data).Error
	return err
}
func (m *defaultPlayerAssetsModel) BatchInsert(ctx context.Context, tx *gorm.DB, news []PlayerAssets) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.Create(&news).Error
	return err
}

func (m *defaultPlayerAssetsModel) FindOne(ctx context.Context, id int64) (*PlayerAssets, error) {
	var resp PlayerAssets
	err := m.conn.WithContext(ctx).Model(&PlayerAssets{}).Where("`id` = ?", id).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultPlayerAssetsModel) FindPageList(ctx context.Context, page *pagex.ListReq, orderBy pagex.OrderBy,
	orderKeys map[string]string, whereClause func(db *gorm.DB) *gorm.DB) ([]PlayerAssets, int64, error) {
	conn := m.conn
	formatDB := func() (*gorm.DB, *gorm.DB) {
		db := conn.Model(&PlayerAssets{})
		if whereClause != nil {
			db = whereClause(db)
		}
		return db, nil
	}

	res, total, err := pagex.FindPageListWithCount[PlayerAssets](ctx, page, orderBy, orderKeys, formatDB)
	return res, total, err
}

func (m *defaultPlayerAssetsModel) FindOneByPlayerIdItemId(ctx context.Context, playerId uint64, itemId uint64) (*PlayerAssets, error) {
	var resp PlayerAssets
	err := m.conn.WithContext(ctx).Model(&PlayerAssets{}).Where("`player_id` = ? and `item_id` = ?", playerId, itemId).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPlayerAssetsModel) Update(ctx context.Context, tx *gorm.DB, data *PlayerAssets) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(data).Error
	return err
}
func (m *defaultPlayerAssetsModel) BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []PlayerAssets) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(&news).Error

	return err
}

func (m *defaultPlayerAssetsModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&PlayerAssets{}, id).Error

	return err
}

func (m *defaultPlayerAssetsModel) BatchDelete(ctx context.Context, tx *gorm.DB, datas []PlayerAssets) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.Delete(&datas).Error
	return err
}
