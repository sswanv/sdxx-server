// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"

	"github.com/SpectatorNan/gorm-zero/gormc/pagex"
	"gorm.io/gorm"
)

type (
	accountModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *Account) error
		BatchInsert(ctx context.Context, tx *gorm.DB, news []Account) error
		FindOne(ctx context.Context, id int64) (*Account, error)
		FindPageList(ctx context.Context, page *pagex.ListReq, orderBy pagex.OrderBy,
			orderKeys map[string]string, whereClause func(db *gorm.DB) *gorm.DB) ([]Account, int64, error)
		FindOneByAccountId(ctx context.Context, accountId uint64) (*Account, error)
		Update(ctx context.Context, tx *gorm.DB, data *Account) error
		BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []Account) error
		BatchDelete(ctx context.Context, tx *gorm.DB, datas []Account) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
	}

	defaultAccountModel struct {
		conn  *gorm.DB
		table string
	}

	Account struct {
		Id              int64        `gorm:"column:id;primary_key"`    // 自增id
		CreatedAt       time.Time    `gorm:"column:created_at"`        // 创建时间
		UpdatedAt       time.Time    `gorm:"column:updated_at"`        // 更新时间
		AccountId       uint64       `gorm:"column:account_id"`        // 账户唯一标识
		Mobile          string       `gorm:"column:mobile"`            // 手机号
		DeviceType      string       `gorm:"column:device_type"`       // 注册设备类型
		DeviceId        string       `gorm:"column:device_id"`         // 注册设备ID
		RegisterTime    time.Time    `gorm:"column:register_time"`     // 注册时间
		RegisterIp      string       `gorm:"column:register_ip"`       // 注册ip
		LastLoginTime   sql.NullTime `gorm:"column:last_login_time"`   // 最后登录时间
		LastLoginIp     string       `gorm:"column:last_login_ip"`     // 最后登录IP
		LastLoginDevice string       `gorm:"column:last_login_device"` // 最后登录设备
		Status          uint64       `gorm:"column:status"`            // 账户状态: 1=正常, 2=封禁, 3=冻结, 4=注销
		BanReason       string       `gorm:"column:ban_reason"`        // 封禁原因
		BanExpireTime   sql.NullTime `gorm:"column:ban_expire_time"`   // 封禁过期时间
	}
)

func (Account) TableName() string {
	return "`account`"
}

func newAccountModel(db *gorm.DB) *defaultAccountModel {
	return &defaultAccountModel{
		conn:  db,
		table: "`account`",
	}
}

func (m *defaultAccountModel) Insert(ctx context.Context, tx *gorm.DB, data *Account) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Create(&data).Error
	return err
}
func (m *defaultAccountModel) BatchInsert(ctx context.Context, tx *gorm.DB, news []Account) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.Create(&news).Error
	return err
}

func (m *defaultAccountModel) FindOne(ctx context.Context, id int64) (*Account, error) {
	var resp Account
	err := m.conn.WithContext(ctx).Model(&Account{}).Where("`id` = ?", id).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultAccountModel) FindPageList(ctx context.Context, page *pagex.ListReq, orderBy pagex.OrderBy,
	orderKeys map[string]string, whereClause func(db *gorm.DB) *gorm.DB) ([]Account, int64, error) {
	conn := m.conn
	formatDB := func() (*gorm.DB, *gorm.DB) {
		db := conn.Model(&Account{})
		if whereClause != nil {
			db = whereClause(db)
		}
		return db, nil
	}

	res, total, err := pagex.FindPageListWithCount[Account](ctx, page, orderBy, orderKeys, formatDB)
	return res, total, err
}

func (m *defaultAccountModel) FindOneByAccountId(ctx context.Context, accountId uint64) (*Account, error) {
	var resp Account
	err := m.conn.WithContext(ctx).Model(&Account{}).Where("`account_id` = ?", accountId).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccountModel) Update(ctx context.Context, tx *gorm.DB, data *Account) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(data).Error
	return err
}
func (m *defaultAccountModel) BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []Account) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(&news).Error

	return err
}

func (m *defaultAccountModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&Account{}, id).Error

	return err
}

func (m *defaultAccountModel) BatchDelete(ctx context.Context, tx *gorm.DB, datas []Account) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.Delete(&datas).Error
	return err
}
