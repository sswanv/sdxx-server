// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"

	"github.com/SpectatorNan/gorm-zero/gormc/pagex"
	"gorm.io/gorm"
)

type (
	accountAuthModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *AccountAuth) error
		BatchInsert(ctx context.Context, tx *gorm.DB, news []AccountAuth) error
		FindOne(ctx context.Context, id int64) (*AccountAuth, error)
		FindPageList(ctx context.Context, page *pagex.ListReq, orderBy pagex.OrderBy,
			orderKeys map[string]string, whereClause func(db *gorm.DB) *gorm.DB) ([]AccountAuth, int64, error)
		FindOneByChannelIdentifier(ctx context.Context, channel uint64, identifier string) (*AccountAuth, error)
		Update(ctx context.Context, tx *gorm.DB, data *AccountAuth) error
		BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []AccountAuth) error
		BatchDelete(ctx context.Context, tx *gorm.DB, datas []AccountAuth) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
	}

	defaultAccountAuthModel struct {
		conn  *gorm.DB
		table string
	}

	AccountAuth struct {
		Id           int64        `gorm:"column:id;primary_key"` // 自增id
		CreatedAt    time.Time    `gorm:"column:created_at"`     // 创建时间
		UpdatedAt    time.Time    `gorm:"column:updated_at"`     // 更新时间
		AccountId    uint64       `gorm:"column:account_id"`     // 账户ID
		Channel      uint64       `gorm:"column:channel"`        // 认证类型: 1=官方
		Identifier   string       `gorm:"column:identifier"`     // 身份标识
		Credential   string       `gorm:"column:credential"`     // 凭证(加密存储)
		LastUsedTime sql.NullTime `gorm:"column:last_used_time"` // 最后使用时间
		Status       uint64       `gorm:"column:status"`         // 状态: 0=正常, 1=禁用
	}
)

func (AccountAuth) TableName() string {
	return "`account_auth`"
}

func newAccountAuthModel(db *gorm.DB) *defaultAccountAuthModel {
	return &defaultAccountAuthModel{
		conn:  db,
		table: "`account_auth`",
	}
}

func (m *defaultAccountAuthModel) Insert(ctx context.Context, tx *gorm.DB, data *AccountAuth) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Create(&data).Error
	return err
}
func (m *defaultAccountAuthModel) BatchInsert(ctx context.Context, tx *gorm.DB, news []AccountAuth) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.Create(&news).Error
	return err
}

func (m *defaultAccountAuthModel) FindOne(ctx context.Context, id int64) (*AccountAuth, error) {
	var resp AccountAuth
	err := m.conn.WithContext(ctx).Model(&AccountAuth{}).Where("`id` = ?", id).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultAccountAuthModel) FindPageList(ctx context.Context, page *pagex.ListReq, orderBy pagex.OrderBy,
	orderKeys map[string]string, whereClause func(db *gorm.DB) *gorm.DB) ([]AccountAuth, int64, error) {
	conn := m.conn
	formatDB := func() (*gorm.DB, *gorm.DB) {
		db := conn.Model(&AccountAuth{})
		if whereClause != nil {
			db = whereClause(db)
		}
		return db, nil
	}

	res, total, err := pagex.FindPageListWithCount[AccountAuth](ctx, page, orderBy, orderKeys, formatDB)
	return res, total, err
}

func (m *defaultAccountAuthModel) FindOneByChannelIdentifier(ctx context.Context, channel uint64, identifier string) (*AccountAuth, error) {
	var resp AccountAuth
	err := m.conn.WithContext(ctx).Model(&AccountAuth{}).Where("`channel` = ? and `identifier` = ?", channel, identifier).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccountAuthModel) Update(ctx context.Context, tx *gorm.DB, data *AccountAuth) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(data).Error
	return err
}
func (m *defaultAccountAuthModel) BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []AccountAuth) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(&news).Error

	return err
}

func (m *defaultAccountAuthModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&AccountAuth{}, id).Error

	return err
}

func (m *defaultAccountAuthModel) BatchDelete(ctx context.Context, tx *gorm.DB, datas []AccountAuth) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.Delete(&datas).Error
	return err
}
