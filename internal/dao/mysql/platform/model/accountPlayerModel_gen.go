// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"

	"github.com/SpectatorNan/gorm-zero/gormc/pagex"
	"gorm.io/gorm"
)

type (
	accountPlayerModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *AccountPlayer) error
		BatchInsert(ctx context.Context, tx *gorm.DB, news []AccountPlayer) error
		FindOne(ctx context.Context, id int64) (*AccountPlayer, error)
		FindPageList(ctx context.Context, page *pagex.ListReq, orderBy pagex.OrderBy,
			orderKeys map[string]string, whereClause func(db *gorm.DB) *gorm.DB) ([]AccountPlayer, int64, error)
		Update(ctx context.Context, tx *gorm.DB, data *AccountPlayer) error
		BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []AccountPlayer) error
		BatchDelete(ctx context.Context, tx *gorm.DB, datas []AccountPlayer) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
	}

	defaultAccountPlayerModel struct {
		conn  *gorm.DB
		table string
	}

	AccountPlayer struct {
		Id        int64     `gorm:"column:id;primary_key"` // 自增id
		CreatedAt time.Time `gorm:"column:created_at"`     // 创建时间
		UpdatedAt time.Time `gorm:"column:updated_at"`     // 更新时间
		AccountId uint64    `gorm:"column:account_id"`     // 账户唯一标识
		ServerId  uint64    `gorm:"column:server_id"`      // 服务器id
		PlayerId  uint64    `gorm:"column:player_id"`      // 玩家id
		NickName  string    `gorm:"column:nick_name"`      // 玩家昵称
		Level     uint64    `gorm:"column:level"`          // 玩家等级
	}
)

func (AccountPlayer) TableName() string {
	return "`account_player`"
}

func newAccountPlayerModel(db *gorm.DB) *defaultAccountPlayerModel {
	return &defaultAccountPlayerModel{
		conn:  db,
		table: "`account_player`",
	}
}

func (m *defaultAccountPlayerModel) Insert(ctx context.Context, tx *gorm.DB, data *AccountPlayer) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Create(&data).Error
	return err
}
func (m *defaultAccountPlayerModel) BatchInsert(ctx context.Context, tx *gorm.DB, news []AccountPlayer) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.Create(&news).Error
	return err
}

func (m *defaultAccountPlayerModel) FindOne(ctx context.Context, id int64) (*AccountPlayer, error) {
	var resp AccountPlayer
	err := m.conn.WithContext(ctx).Model(&AccountPlayer{}).Where("`id` = ?", id).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultAccountPlayerModel) FindPageList(ctx context.Context, page *pagex.ListReq, orderBy pagex.OrderBy,
	orderKeys map[string]string, whereClause func(db *gorm.DB) *gorm.DB) ([]AccountPlayer, int64, error) {
	conn := m.conn
	formatDB := func() (*gorm.DB, *gorm.DB) {
		db := conn.Model(&AccountPlayer{})
		if whereClause != nil {
			db = whereClause(db)
		}
		return db, nil
	}

	res, total, err := pagex.FindPageListWithCount[AccountPlayer](ctx, page, orderBy, orderKeys, formatDB)
	return res, total, err
}

func (m *defaultAccountPlayerModel) Update(ctx context.Context, tx *gorm.DB, data *AccountPlayer) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(data).Error
	return err
}
func (m *defaultAccountPlayerModel) BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []AccountPlayer) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(&news).Error

	return err
}

func (m *defaultAccountPlayerModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&AccountPlayer{}, id).Error

	return err
}

func (m *defaultAccountPlayerModel) BatchDelete(ctx context.Context, tx *gorm.DB, datas []AccountPlayer) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.Delete(&datas).Error
	return err
}
